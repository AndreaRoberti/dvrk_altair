/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-    */
/* ex: set filetype=cpp softtabstop=4 shiftwidth=4 tabstop=4 cindent expandtab: */

/*
  
  Author(s):  Ankur Kapoor
  Created on: 2005-11-04
  
  (C) Copyright 2005-2015 Johns Hopkins University (JHU), All Rights Reserved.

--- begin cisst license - do not edit ---

This software is provided "as is" under an open source license, with
no warranty.  The complete license can be found in license.txt and
http://www.cisst.org/cisst/license.txt.

--- end cisst license ---
*/


#ifndef _nmrLSqLinTest_h
#define _nmrLSqLinTest_h

#include <cisstCommon/cmnPortability.h>

#include <cppunit/TestCase.h>
#include <cppunit/extensions/HelperMacros.h>

#include <cisstNumerical/nmrLSqLin.h>

#ifdef BUILD_MULTITHREADED_TESTS
#include <cisstOSAbstraction/osaThread.h>

struct argument {long int times, number;};

class nmrLSqLinDynamicTestObject
{
public:
    vctDynamicMatrix<double> InputA;  // A
    vctDynamicMatrix<double> InputG; // G
    vctDynamicMatrix<double> InputE; // G
    vctDynamicVector<double> Inputb; // b
    vctDynamicVector<double> Inputh; // h
    vctDynamicVector<double> Inputf; // h
    vctDynamicVector<double> OutputXLS;
    vctDynamicVector<double> OutputXLSI;
    vctDynamicVector<double> OutputXLSEI;
    nmrLSqLinDynamicTestObject() {}
    ~nmrLSqLinDynamicTestObject() {}
    
    void SetUp(int i) {
        if (i % 2 == 0) {
            /************************* EVEN *************************/
            InputA.SetSize(5, 4, VCT_COL_MAJOR);
            InputA.Assign(  9.0025857029,   5.2419366605,   2.3086469620,  -1.8858757388,
                            -5.3772297285, -0.8706466966,   5.8387407485,   8.7093939822,
                            2.1368516708, -9.6299271350, 8.4362594149,   8.3380887983,
                            -0.2803506258, 6.4281432859,   4.7641449162,  -1.7945958602,
                            7.8259793230, -1.1059327129,  -6.4746771101,   7.8729906183);
            Inputb.SetSize(5);
            Inputb.Assign(-8.8421739043,  -2.9426373557,   6.2633299461,  -9.8027739868,  -7.2221823609);
            InputE.SetSize(2, 4, VCT_COL_MAJOR);
            InputE.Assign(6.7623689010,   3.6255432256,   6.6359203522,   4.1894278541,
                          -9.6072097227,  -2.4103796394,   0.0562576799,  -1.4221526932);
            Inputf.SetSize(2);
            Inputf.Assign( -3.9076526626,  -6.2069250491);
            InputG.SetSize(3, 4, VCT_COL_MAJOR);
            InputG.Assign(-5.9446956288,  -4.5562415006,   4.9357135313,  -0.6801131665,
                          -6.0255651468,  -6.0237146448,  -1.0980713542,  -1.6270106454,
                          2.0758495839,  -9.6945214594,   8.6362915692,   6.9244283565);
            Inputh.SetSize(3);
            Inputh.Assign(0.5030499261,  -5.9470528470,   3.4427493695);
            OutputXLS.SetSize(4);
            OutputXLS.Assign(-0.3640393763,  -1.4868363956,  -0.0674660476,  -0.7551990859);
            OutputXLSI.SetSize(4);
            OutputXLSI.Assign(-0.3640393763,  -1.4868363956,  -0.0674660476,  -0.7551990859);
            OutputXLSEI.SetSize(4);
            OutputXLSEI.Assign(1.2589079631,  -1.8067666486,  -0.1992658795,  -1.0855968384);
        } else {
            /************************* ODD *************************/
            InputA.SetSize(15, 15, VCT_COL_MAJOR);
            InputA.Assign(-120.2457115,50.77407853,57.78573463,94.08899407,56.89606457,147.2479934,93.1217515,49.77696642,153.5152266,-7.866191936,-38.97995485,55.11847118,-212.0426688,-7.832119627,-80.76491309,
                          -1.978955777,169.242987,4.031403162,-99.20917355,-82.17142917,5.574383184,1.124489638,148.8490471,-60.64828593,-68.165686,-138.1265624,-109.9840455,-64.46789155,88.91726184,68.04385837,
                          -15.67172988,59.12825869,67.70891876,21.20351522,-26.56068513,-121.7317454,-64.51458157,-54.64758948,-134.7362674,-102.4553057,31.55426328,8.599059329,-70.43017284,230.9287486,-236.4589848,
                          -160.4085562,-64.35952027,56.89002052,23.78820729,-118.7777016,-4.122713369,80.57287931,-84.67581639,46.93831199,-123.4353478,155.3242569,-200.4563322,-101.8137216,52.46386798,99.0114872,
                          25.73042347,38.03372517,-25.56454156,-100.7763392,-220.2320717,-112.8343864,23.16260108,-24.63365281,-90.35669426,28.88070187,70.78938846,-49.30879177,-18.20818684,-1.178732395,21.88991209,
                          -105.6472928,-100.9115524,-37.74689555,-74.20447521,98.6337391,-134.9277543,-98.97596717,66.30241459,3.587963873,-42.93030046,195.7384755,46.20480118,152.1013239,91.31408178,26.16624602,
                          141.5141486,-1.951066953,-29.588711,108.2294953,-51.86350663,-26.11016231,133.9585701,-85.41973745,-62.753122,5.580119018,50.45423536,-32.10046922,-3.843876389,5.594067889,121.3444495,
                          -80.50904042,-4.822078915,-147.5134506,-13.14997029,32.73675641,95.34654455,28.95020345,-120.1314815,53.53979542,-36.78735667,186.452902,123.6555652,122.7447989,-110.7069895,-27.46669865,
                          52.8743011,0.004319184163,-23.40040477,38.98804897,23.40570128,12.864443,147.8917058,-11.98694281,55.28835174,-46.49733672,-33.98117774,-63.12796567,-69.62048,48.54977073,-13.31344508,
                          21.93206727,-31.78594512,11.84448371,8.798710658,2.146613888,65.64675139,113.8028013,-6.529401484,-20.36904796,37.09605838,-113.9779402,-232.5211129,0.7524486523,-0.5005073756,-127.0500204,
                          -92.19016244,109.5003739,31.48090434,-63.54652255,-100.3944467,-116.7819365,-68.41385851,48.52955559,-205.4324681,72.82829316,-21.11234834,-123.1636533,-78.28930444,-27.62178594,-166.3606453,
                          -217.0674494,-187.3990258,144.3508244,-55.95733022,-94.71460647,-46.06051795,-129.1936045,-59.54909026,13.25607314,211.216017,119.0244936,105.5648388,58.69385592,127.6452474,-70.35542615,
                          -5.918782452,42.8183273,-35.09747383,44.36534895,-37.4429195,-26.24399528,-7.292627626,-14.96677438,159.2940704,-135.7297743,-111.6208758,-11.32239894,-25.12073746,186.3400613,28.08804885,
                          -101.0633706,89.56384712,62.32338511,-94.99037985,-118.5886214,-121.3152068,-33.05988799,-43.47519312,101.8411789,-102.2610144,63.52741347,37.92236227,48.01358228,-52.25593016,-54.12093299,
                          61.44630489,73.09573384,79.90486181,78.11816179,-105.5902924,-131.9436998,-84.36276392,-7.933022302,-158.0402499,103.7834199,-60.14121263,94.41997267,66.81550344,10.34244469,-133.353073);
            InputG.SetSize(10, 15, VCT_COL_MAJOR);
            InputG.Assign(9.0025857029,   2.3086469620,  -8.8421739043,  -9.6945214594,   6.7623689010,  -6.1313768719,  -0.0689510059,   4.5422643386,   5.8964216040,  -7.2696251548,   1.6558336312,  -5.8186119112,  -1.6925027911,  -5.7207333681,   3.6666464868,
                          -5.3772297285,   5.8387407485,  -2.9426373557,   4.9357135313,  -9.6072097227,   3.6444644718,   7.9953835034,  -3.8141968042,   9.1368689689,  -9.7648662529,  -1.5300748630,  -2.4036325930,  -3.9000264599,   2.8698457577,  -5.7488027132,
                          2.1368516708,   8.4362594149,   6.2633299461,  -1.0980713542,   3.6255432256,  -3.9447119845,   6.4325832147,   6.7699208988,   0.4518069816,   7.8779593289,   0.3102350428,   5.6665729974,   7.4873434318,  -3.5992884507,   6.7847648067,
                          -0.2803506258,   4.7641449162,  -9.8027739868,   8.6362915692,  -2.4103796394,   0.8334770780,   2.8982076839,   1.3614492202,   7.6028441482,  -6.0172386559,  -3.3209704006,   3.6169150279,  -9.6998100265,   9.2019720074,   2.5756920005,
                          7.8259793230,  -6.4746771101,  -7.2221823609,  -0.6801131665,   6.6359203522,  -6.9825404770,   6.3594868168,  -2.5917288674,  -6.5408771745,  -4.0255397580,  -1.3418680779,  -0.7780974669,   5.3590078002,   4.5326353328,  -7.3245450305,
                          5.2419366605,  -1.8858757388,  -5.9446956288,  -1.6270106454,   0.0562576799,   3.9579696372,   3.2045511288,   4.0547982648,   9.5949379358,   3.2288515276,  -5.4810026371,   1.3565742486,   9.4168987851,  -1.7609358366,  -5.8573454072,
                          -0.8706466966,   8.7093939822,  -6.0255651468,   6.9244283565,   4.1894278541,  -2.4325399897,  -3.1605876346,   0.9314230366,  -4.5710548272,  -4.3118282050,   1.5961374650,   5.8842130275,   9.8016518523,   4.8913156621,   2.1439788908,
                          -9.6299271350,   8.3380887983,   2.0758495839,   0.5030499261,  -1.4221526932,   7.2002320977,  -4.2054820829,  -1.1023959065,  -4.9534130625,  -0.6155142958,   5.2073001961,  -8.8163481306,   5.7772338447,  -4.6410549858,   2.5977569768,
                          6.4281432859,  -1.7945958602,  -4.5562415006,  -5.9470528470,  -3.9076526626,   7.0731026133,  -3.1761286117,   3.8913448085,   7.5148379964,  -8.7043775407,   0.5964623343,   2.0573817133,  -1.2268293246,  -1.2015138087,  -2.5904634790,
                          -1.1059327129,   7.8729906183,  -6.0237146448,   3.4427493695,  -6.2069250491,   1.8712582508,   0.6815803525,   2.4262026159,   4.7461197693,   9.7666987656,   2.8105299798,  -8.9946239251,  -0.0337739310,   8.6676021638,   1.5029555809);
            InputE.SetSize(2, 15, VCT_COL_MAJOR);
            InputE.Assign(2.1708072245,  -9.6729013290,   1.7383694377,  -2.6486392235,   4.3526884293,  -8.3184187850,  -1.1634340619,  -6.9278727495,   3.9842665548,  -0.4323123809,  -7.5790577393,   4.3176589635,  -4.5379505955,   7.3120695549,   6.0974348823,
                          -9.6848036416,  -6.1985082184,  -8.8483782024,   2.6290232949,   3.8533878944,  -0.9128970049,  -2.9349909000,   3.5128929927,   4.5501825844,   1.0968397268,  -0.9849211804,   7.8568321629,  -4.9046140888,  -5.3529925874,   8.1679508690);
            Inputb.SetSize(15);
            Inputb.Assign(107.2686268, -71.20854525, -1.128556123, -0.08170291957, -24.94362847, 39.65753187, -26.40133549, -166.4010877, -102.89751, 24.30947002, -125.6590108, -34.71831897, -94.13721934, -117.4560281, -102.1141687);
            Inputh.SetSize(10);
            Inputh.Assign(-0.9715034648,  -9.1220934931,  -9.4562975401,  -3.7462990384,  -9.7427485065,  -2.3206542301,   3.6623193561,  -8.1431507652,  -9.2932335206,   2.2479096275);
            Inputf.SetSize(2);
            Inputf.Assign(-5.3621136378,  -5.2137487106);
            OutputXLS.SetSize(15);
            OutputXLSI.SetSize(15);
            OutputXLSEI.SetSize(15);
            OutputXLS.Assign(3.808716234, 1.765037779, 1.097770212, 0.6452779718, -0.1777115626, 1.860559974, -3.247995013, 1.490777879, 2.820173362, 1.725528877, 3.994729991, -2.427902554, -0.5392562507, 0.6442630721, -0.95034165);
            OutputXLSI.Assign( 0.5747788067,   0.1581181083,   0.4984485143,   0.6457624725,   0.1879274009,   0.5456433420,  -0.5162576326,   0.8427321219,   0.1974229314,   0.0947370652,   0.8382093520,  -0.4009410262,   0.0955929575,   0.1733249029,  -0.0054116882);
            OutputXLSEI.Assign( 0.3395694932,   0.2948549823,   0.4175380736,   0.3992228232,   0.5173666331,   0.2019422254,  -0.3563247260,   0.3322882992,   0.2257725654,   0.3113249083,   0.4907819931,  -0.3418034762,   0.0091313418,   0.2295252951,   0.1957292687);
        }
        
    }
    
    void *RunThreadLS(argument arg)
    {
        CMN_LOG_INIT_ERROR << "nmrLSqLinTest: Running thread #" << arg.number << ", " << arg.times << " iterations" << std::endl;
        for (int i = 0; i < arg.times; i++) {
            SetUp(i);
            nmrLSqLinSolutionDynamic solution(InputA);
            nmrLSqLin(InputA, Inputb, solution);
            double error = (solution.GetX() - OutputXLS).LinfNorm();
            CPPUNIT_ASSERT(error < Inputb.size()*cmnTypeTraits<double>::Tolerance());
        }
        return this;
    }
    
    void *RunThreadLSI(argument arg)
    {
        CMN_LOG_INIT_ERROR << "nmrLSqLinTest: Running thread #" << arg.number << ", " << arg.times << " iterations" << std::endl;
        for (int i = 0; i < arg.times; i++) {
            SetUp(i);
            nmrLSqLinSolutionDynamic solution(InputA, InputG);
            nmrLSqLin(InputA, Inputb, InputG, Inputh, solution);
            double error = (solution.GetX() - OutputXLSI).LinfNorm();
            CPPUNIT_ASSERT(error < Inputb.size()*cmnTypeTraits<double>::Tolerance());
        }
        return this;
    }
    
    void *RunThreadLSEI(argument arg)
    {
        CMN_LOG_INIT_ERROR << "nmrLSqLinTest: Running thread #" << arg.number << ", " << arg.times << " iterations" << std::endl;
        for (int i = 0; i < arg.times; i++) {
            SetUp(i);
            nmrLSqLinSolutionDynamic solution(InputA, InputE, InputG);
            nmrLSqLin(InputA, Inputb, InputE, Inputf, InputG, Inputh, solution);
            double error = (solution.GetX() - OutputXLSEI).LinfNorm();
            CPPUNIT_ASSERT(error < Inputb.size()*cmnTypeTraits<double>::Tolerance());
        }
        return this;
    }
    
};
#endif

class nmrLSqLinTest: public CppUnit::TestCase
{
    CPPUNIT_TEST_SUITE(nmrLSqLinTest);

    CPPUNIT_TEST(TestDynamicLS);
    CPPUNIT_TEST(TestDynamicLS_Underconstrained);
    CPPUNIT_TEST(TestDynamicLSUserAlloc);
    CPPUNIT_TEST(TestDynamicLSUserAlloc_Underconstrained);
#ifdef BUILD_MULTITHREADED_TESTS
    CPPUNIT_TEST(TestDynamicLSThreadSafety);
#endif

    CPPUNIT_TEST(TestDynamicLSI);
    CPPUNIT_TEST(TestDynamicLSIUserAlloc);
#ifdef BUILD_MULTITHREADED_TESTS
    CPPUNIT_TEST(TestDynamicLSIThreadSafety);
#endif

    CPPUNIT_TEST(TestDynamicLSEI);
    CPPUNIT_TEST(TestDynamicLSEIUserAlloc);
#ifdef BUILD_MULTITHREADED_TESTS
    CPPUNIT_TEST(TestDynamicLSEIThreadSafety);
#endif

    CPPUNIT_TEST(TestFixedSizeLS);
    CPPUNIT_TEST(TestFixedSizeLS_Underconstrained);
    CPPUNIT_TEST(TestFixedSizeLSObject);
    CPPUNIT_TEST(TestFixedSizeLSObject_Underconstrained);

    CPPUNIT_TEST(TestFixedSizeLSI);
    CPPUNIT_TEST(TestFixedSizeLSIObject);

    CPPUNIT_TEST(TestFixedSizeLSEI);
    CPPUNIT_TEST(TestFixedSizeLSEIObject);

    CPPUNIT_TEST_SUITE_END();

    vctDynamicMatrix<double> InputA;  // A
    vctDynamicMatrix<double> InputG; // G
    vctDynamicMatrix<double> InputE; // G
    vctDynamicVector<double> Inputb; // b
    vctDynamicVector<double> Inputh; // h
    vctDynamicVector<double> Inputf; // h
    vctDynamicVector<double> OutputXLS;
    vctDynamicVector<double> OutputXLSI;
    vctDynamicVector<double> OutputXLSEI;

    vctFixedSizeMatrix<double, 5, 4, VCT_COL_MAJOR> A;
    vctFixedSizeVector<double, 5> b;
    vctFixedSizeMatrix<double, 2, 4, VCT_COL_MAJOR> E;
    vctFixedSizeVector<double, 2> f;
    vctFixedSizeMatrix<double, 3, 4, VCT_COL_MAJOR> G;
    vctFixedSizeVector<double, 3> h;
    vctFixedSizeVector<double, 4> XLS;
    vctFixedSizeVector<double, 4> XLSI;
    vctFixedSizeVector<double, 4> XLSEI;

public:

    void setUp()
    {
        /************************* FIXED *************************/
        A.Assign(9.0025857029,   5.2419366605,   2.3086469620,  -1.8858757388,
                 -5.3772297285, -0.8706466966,   5.8387407485,   8.7093939822,
                 2.1368516708, -9.6299271350, 8.4362594149,   8.3380887983,
                 -0.2803506258, 6.4281432859,   4.7641449162,  -1.7945958602,
                 7.8259793230, -1.1059327129,  -6.4746771101,   7.8729906183);
        b.Assign(-8.8421739043,  -2.9426373557,   6.2633299461,  -9.8027739868,  -7.2221823609);
        E.Assign(6.7623689010,   3.6255432256,   6.6359203522,   4.1894278541,
                 -9.6072097227,  -2.4103796394,   0.0562576799,  -1.4221526932);
        f.Assign( -3.9076526626,  -6.2069250491);
        G.Assign(-5.9446956288,  -4.5562415006,   4.9357135313,  -0.6801131665,
                 -6.0255651468,  -6.0237146448,  -1.0980713542,  -1.6270106454,
                 2.0758495839,  -9.6945214594,   8.6362915692,   6.9244283565);
        h.Assign(0.5030499261,  -5.9470528470,   3.4427493695);
        XLS.Assign(-0.3640393763,  -1.4868363956,  -0.0674660476,  -0.7551990859);
        XLSI.Assign(-0.3640393763,  -1.4868363956,  -0.0674660476,  -0.7551990859);
        XLSEI.Assign(1.2589079631,  -1.8067666486,  -0.1992658795,  -1.0855968384);
        
        /************************* DYNAMIC *************************/
        InputA.SetSize(15, 15, VCT_COL_MAJOR);
        InputA.Assign(-120.2457115,50.77407853,57.78573463,94.08899407,56.89606457,147.2479934,93.1217515,49.77696642,153.5152266,-7.866191936,-38.97995485,55.11847118,-212.0426688,-7.832119627,-80.76491309,
                      -1.978955777,169.242987,4.031403162,-99.20917355,-82.17142917,5.574383184,1.124489638,148.8490471,-60.64828593,-68.165686,-138.1265624,-109.9840455,-64.46789155,88.91726184,68.04385837,
                      -15.67172988,59.12825869,67.70891876,21.20351522,-26.56068513,-121.7317454,-64.51458157,-54.64758948,-134.7362674,-102.4553057,31.55426328,8.599059329,-70.43017284,230.9287486,-236.4589848,
                      -160.4085562,-64.35952027,56.89002052,23.78820729,-118.7777016,-4.122713369,80.57287931,-84.67581639,46.93831199,-123.4353478,155.3242569,-200.4563322,-101.8137216,52.46386798,99.0114872,
                      25.73042347,38.03372517,-25.56454156,-100.7763392,-220.2320717,-112.8343864,23.16260108,-24.63365281,-90.35669426,28.88070187,70.78938846,-49.30879177,-18.20818684,-1.178732395,21.88991209,
                      -105.6472928,-100.9115524,-37.74689555,-74.20447521,98.6337391,-134.9277543,-98.97596717,66.30241459,3.587963873,-42.93030046,195.7384755,46.20480118,152.1013239,91.31408178,26.16624602,
                      141.5141486,-1.951066953,-29.588711,108.2294953,-51.86350663,-26.11016231,133.9585701,-85.41973745,-62.753122,5.580119018,50.45423536,-32.10046922,-3.843876389,5.594067889,121.3444495,
                      -80.50904042,-4.822078915,-147.5134506,-13.14997029,32.73675641,95.34654455,28.95020345,-120.1314815,53.53979542,-36.78735667,186.452902,123.6555652,122.7447989,-110.7069895,-27.46669865,
                      52.8743011,0.004319184163,-23.40040477,38.98804897,23.40570128,12.864443,147.8917058,-11.98694281,55.28835174,-46.49733672,-33.98117774,-63.12796567,-69.62048,48.54977073,-13.31344508,
                      21.93206727,-31.78594512,11.84448371,8.798710658,2.146613888,65.64675139,113.8028013,-6.529401484,-20.36904796,37.09605838,-113.9779402,-232.5211129,0.7524486523,-0.5005073756,-127.0500204,
                      -92.19016244,109.5003739,31.48090434,-63.54652255,-100.3944467,-116.7819365,-68.41385851,48.52955559,-205.4324681,72.82829316,-21.11234834,-123.1636533,-78.28930444,-27.62178594,-166.3606453,
                      -217.0674494,-187.3990258,144.3508244,-55.95733022,-94.71460647,-46.06051795,-129.1936045,-59.54909026,13.25607314,211.216017,119.0244936,105.5648388,58.69385592,127.6452474,-70.35542615,
                      -5.918782452,42.8183273,-35.09747383,44.36534895,-37.4429195,-26.24399528,-7.292627626,-14.96677438,159.2940704,-135.7297743,-111.6208758,-11.32239894,-25.12073746,186.3400613,28.08804885,
                      -101.0633706,89.56384712,62.32338511,-94.99037985,-118.5886214,-121.3152068,-33.05988799,-43.47519312,101.8411789,-102.2610144,63.52741347,37.92236227,48.01358228,-52.25593016,-54.12093299,
                      61.44630489,73.09573384,79.90486181,78.11816179,-105.5902924,-131.9436998,-84.36276392,-7.933022302,-158.0402499,103.7834199,-60.14121263,94.41997267,66.81550344,10.34244469,-133.353073);
        InputG.SetSize(10, 15, VCT_COL_MAJOR);
        InputG.Assign(9.0025857029,   2.3086469620,  -8.8421739043,  -9.6945214594,   6.7623689010,  -6.1313768719,  -0.0689510059,   4.5422643386,   5.8964216040,  -7.2696251548,   1.6558336312,  -5.8186119112,  -1.6925027911,  -5.7207333681,   3.6666464868,
                      -5.3772297285,   5.8387407485,  -2.9426373557,   4.9357135313,  -9.6072097227,   3.6444644718,   7.9953835034,  -3.8141968042,   9.1368689689,  -9.7648662529,  -1.5300748630,  -2.4036325930,  -3.9000264599,   2.8698457577,  -5.7488027132,
                      2.1368516708,   8.4362594149,   6.2633299461,  -1.0980713542,   3.6255432256,  -3.9447119845,   6.4325832147,   6.7699208988,   0.4518069816,   7.8779593289,   0.3102350428,   5.6665729974,   7.4873434318,  -3.5992884507,   6.7847648067,
                      -0.2803506258,   4.7641449162,  -9.8027739868,   8.6362915692,  -2.4103796394,   0.8334770780,   2.8982076839,   1.3614492202,   7.6028441482,  -6.0172386559,  -3.3209704006,   3.6169150279,  -9.6998100265,   9.2019720074,   2.5756920005,
                      7.8259793230,  -6.4746771101,  -7.2221823609,  -0.6801131665,   6.6359203522,  -6.9825404770,   6.3594868168,  -2.5917288674,  -6.5408771745,  -4.0255397580,  -1.3418680779,  -0.7780974669,   5.3590078002,   4.5326353328,  -7.3245450305,
                      5.2419366605,  -1.8858757388,  -5.9446956288,  -1.6270106454,   0.0562576799,   3.9579696372,   3.2045511288,   4.0547982648,   9.5949379358,   3.2288515276,  -5.4810026371,   1.3565742486,   9.4168987851,  -1.7609358366,  -5.8573454072,
                      -0.8706466966,   8.7093939822,  -6.0255651468,   6.9244283565,   4.1894278541,  -2.4325399897,  -3.1605876346,   0.9314230366,  -4.5710548272,  -4.3118282050,   1.5961374650,   5.8842130275,   9.8016518523,   4.8913156621,   2.1439788908,
                      -9.6299271350,   8.3380887983,   2.0758495839,   0.5030499261,  -1.4221526932,   7.2002320977,  -4.2054820829,  -1.1023959065,  -4.9534130625,  -0.6155142958,   5.2073001961,  -8.8163481306,   5.7772338447,  -4.6410549858,   2.5977569768,
                      6.4281432859,  -1.7945958602,  -4.5562415006,  -5.9470528470,  -3.9076526626,   7.0731026133,  -3.1761286117,   3.8913448085,   7.5148379964,  -8.7043775407,   0.5964623343,   2.0573817133,  -1.2268293246,  -1.2015138087,  -2.5904634790,
                      -1.1059327129,   7.8729906183,  -6.0237146448,   3.4427493695,  -6.2069250491,   1.8712582508,   0.6815803525,   2.4262026159,   4.7461197693,   9.7666987656,   2.8105299798,  -8.9946239251,  -0.0337739310,   8.6676021638,   1.5029555809);
        InputE.SetSize(2, 15, VCT_COL_MAJOR);
        InputE.Assign(2.1708072245,  -9.6729013290,   1.7383694377,  -2.6486392235,   4.3526884293,  -8.3184187850,  -1.1634340619,  -6.9278727495,   3.9842665548,  -0.4323123809,  -7.5790577393,   4.3176589635,  -4.5379505955,   7.3120695549,   6.0974348823,
                      -9.6848036416,  -6.1985082184,  -8.8483782024,   2.6290232949,   3.8533878944,  -0.9128970049,  -2.9349909000,   3.5128929927,   4.5501825844,   1.0968397268,  -0.9849211804,   7.8568321629,  -4.9046140888,  -5.3529925874,   8.1679508690);
        Inputb.SetSize(15);
        Inputb.Assign(107.2686268, -71.20854525, -1.128556123, -0.08170291957, -24.94362847, 39.65753187, -26.40133549, -166.4010877, -102.89751, 24.30947002, -125.6590108, -34.71831897, -94.13721934, -117.4560281, -102.1141687);
        Inputh.SetSize(10);
        Inputh.Assign(-0.9715034648,  -9.1220934931,  -9.4562975401,  -3.7462990384,  -9.7427485065,  -2.3206542301,   3.6623193561,  -8.1431507652,  -9.2932335206,   2.2479096275);
        Inputf.SetSize(2);
        Inputf.Assign(-5.3621136378,  -5.2137487106);
        OutputXLS.SetSize(15);
        OutputXLSI.SetSize(15);
        OutputXLSEI.SetSize(15);
        OutputXLS.Assign(3.808716234, 1.765037779, 1.097770212, 0.6452779718, -0.1777115626, 1.860559974, -3.247995013, 1.490777879, 2.820173362, 1.725528877, 3.994729991, -2.427902554, -0.5392562507, 0.6442630721, -0.95034165);
        OutputXLSI.Assign( 0.5747788067,   0.1581181083,   0.4984485143,   0.6457624725,   0.1879274009,   0.5456433420,  -0.5162576326,   0.8427321219,   0.1974229314,   0.0947370652,   0.8382093520,  -0.4009410262,   0.0955929575,   0.1733249029,  -0.0054116882);
        OutputXLSEI.Assign( 0.3395694932,   0.2948549823,   0.4175380736,   0.3992228232,   0.5173666331,   0.2019422254,  -0.3563247260,   0.3322882992,   0.2257725654,   0.3113249083,   0.4907819931,  -0.3418034762,   0.0091313418,   0.2295252951,   0.1957292687);
    }
    void tearDown()
    {}
    
    /*! Test using column major matrices. */
    void TestDynamicLS(void);

    /*! Test using column major matrices, underconstrained system (more unknowns than equations). */
    void TestDynamicLS_Underconstrained(void);
    
    /*! Test using column major matrices. */
    void TestDynamicLSUserAlloc(void);

    /*! Test using column major matrices, underconstrained system (more unknowns than equations). */
    void TestDynamicLSUserAlloc_Underconstrained(void);

#ifdef BUILD_MULTITHREADED_TESTS
    /*! Test using column major matrices. */
    void TestDynamicLSThreadSafety(void);
#endif

    /*! Test using column major matrices. */
    void TestDynamicLSI(void);

    /*! Test using column major matrices. */
    void TestDynamicLSIUserAlloc(void);

#ifdef BUILD_MULTITHREADED_TESTS
    /*! Test using column major matrices. */
    void TestDynamicLSIThreadSafety(void);
#endif

    /*! Test using column major matrices. */
    void TestDynamicLSEI(void);

    /*! Test using column major matrices. */
    void TestDynamicLSEIUserAlloc(void);

#ifdef BUILD_MULTITHREADED_TESTS
    /*! Test using column major matrices. */
    void TestDynamicLSEIThreadSafety(void);
#endif

    void TestFixedSizeLS(void);
    void TestFixedSizeLS_Underconstrained(void);

    void TestFixedSizeLSObject(void);
    void TestFixedSizeLSObject_Underconstrained(void);

    void TestFixedSizeLSI(void);

    void TestFixedSizeLSIObject(void);

    void TestFixedSizeLSEI(void);

    void TestFixedSizeLSEIObject(void);

};


#endif // _nmrLSqLinTest_h

