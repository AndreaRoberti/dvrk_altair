/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-    */
/* ex: set filetype=cpp softtabstop=4 shiftwidth=4 tabstop=4 cindent expandtab: */
/*

  Author(s):  Ankur Kapoor, Peter Kazanzides, Anton Deguet
  Created on: 2004-04-30

  (C) Copyright 2004-2013 Johns Hopkins University (JHU), All Rights
  Reserved.

--- begin cisst license - do not edit ---

This software is provided "as is" under an open source license, with
no warranty.  The complete license can be found in license.txt and
http://www.cisst.org/cisst/license.txt.

--- end cisst license ---
*/

#ifndef _sineTask_h
#define _sineTask_h

#include <cisstMultiTask/mtsTaskPeriodic.h>

// check if this module is built as a DLL
#ifdef mtsExPeriodicTaskComponents_EXPORTS
#define CISST_THIS_LIBRARY_AS_DLL
#endif
#include <cisstCommon/cmnExportMacros.h>

// avoid impact on other modules
#undef CISST_THIS_LIBRARY_AS_DLL

class CISST_EXPORT sineTask: public mtsTaskPeriodic {
    // used to control the log level, "Run Error" by default
    CMN_DECLARE_SERVICES(CMN_DYNAMIC_CREATION_ONEARG, CMN_LOG_LOD_RUN_ERROR);
 protected:

    // data generated by the sine wave generator, type & name
    mtsDouble SineData;

    // declaration of interface and available commands
    struct MainInterface {
        mtsFunctionVoid TriggerEvent;
    } MainInterface;

    // amplitude of the sine wave, not stored in state table
    double SineAmplitude;
    // trigger threshold, i.e. when the data generated reaches this value
    // an event is generated.
    double TriggerThreshold;

    // internal method to configure this component
    void SetupInterfaces(void);

    // internal methods used for the provided commands
    void SetAmplitude(const mtsDouble & amplitude);
    void SetTriggerThreshold(const mtsDouble & value);
    void ResetTrigger(void);

    // internal flag
    bool TriggerEnabled;

 public:
    // provide a name for the task and define the frequency (time
    // interval between calls to the periodic Run).  Also used to
    // populate the interface(s)
    sineTask(const std::string & componentName, double periodInSeconds);
    sineTask(const mtsTaskPeriodicConstructorArg & arg);
    ~sineTask() {};
    // all four methods are pure virtual in mtsTask
    void Configure(const std::string & CMN_UNUSED(filename)) {};
    void Startup(void);    // set some initial values
    void Run(void);        // performed periodically
    void Cleanup(void) {}; // user defined cleanup
};

CMN_DECLARE_SERVICES_INSTANTIATION(sineTask);

#endif // _sineTask_h
