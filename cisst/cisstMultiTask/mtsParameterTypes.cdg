// -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
// ex: set filetype=cpp softtabstop=4 shiftwidth=4 tabstop=4 cindent expandtab:

inline-header {
#include <cisstMultiTask/mtsParameterTypesOld.h>
// Always include last
#include <cisstMultiTask/mtsExport.h>
}

class {
    name mtsDescriptionComponent;
    attribute CISST_EXPORT;
    mts-proxy declaration-only;
    ctor-all-members true;
    member {
        name ProcessName;
        type std::string;
        visibility public;
    }
    member {
        name ComponentName;
        type std::string;
        visibility public;
    }
    member {
        name ClassName;
        type std::string;
        visibility public;
    }
    member {
        name ConstructorArgSerialized;
        type std::string;
        visibility public;
    }
    inline-header {
    public:
       mtsDescriptionComponent(const std::string & processName, const std::string & componentName);
    }
}

inline-code {
    mtsDescriptionComponent::mtsDescriptionComponent(const std::string & processName, const std::string & componentName):
        ProcessName(processName),
        ComponentName(componentName) {
    }
}


class {
    name mtsDescriptionComponentClass;
    attribute CISST_EXPORT;
    mts-proxy declaration-only;
    ctor-all-members true;
    member {
        name ClassName;
        type std::string;
        visibility public;
    }
    member {
        name ArgType;
        type std::string;
        visibility public;
    }
    member {
        name ArgTypeId;
        type std::string;
        visibility public;
    }
}

inline-header {
typedef std::vector<mtsDescriptionComponentClass> mtsDescriptionComponentClassVec;
typedef mtsGenericObjectProxy<mtsDescriptionComponentClassVec> mtsDescriptionComponentClassVecProxy;
CMN_DECLARE_SERVICES_INSTANTIATION(mtsDescriptionComponentClassVecProxy);
}

class {
    name mtsDescriptionInterface;
    attribute CISST_EXPORT;
    mts-proxy declaration-only;
    ctor-all-members true;
    member {
        name ProcessName;
        type std::string;
        visibility public;
    }
    member {
        name ComponentName;
        type std::string;
        visibility public;
    }
    member {
        name InterfaceRequiredNames;
        type std::vector<std::string>;
        visibility public;
    }
    member {
        name InterfaceProvidedNames;
        type std::vector<std::string>;
        visibility public;
    }
}


class {
    name mtsDescriptionInterfaceFullName;
    attribute CISST_EXPORT;
    mts-proxy declaration-only;
    ctor-all-members true;
    member {
        name ProcessName;
        type std::string;
        visibility public;
    }
    member {
        name ComponentName;
        type std::string;
        visibility public;
    }
    member {
        name InterfaceName;
        type std::string;
        visibility public;
    }
}

inline-header {
typedef std::vector<mtsDescriptionInterfaceFullName> mtsDescriptionInterfaceFullNameVec;
typedef mtsGenericObjectProxy<mtsDescriptionInterfaceFullNameVec> mtsDescriptionInterfaceFullNameVecProxy;
CMN_DECLARE_SERVICES_INSTANTIATION(mtsDescriptionInterfaceFullNameVecProxy);

/* to use description in std::maps */
namespace std {
    template <>
    struct less<mtsDescriptionInterfaceFullName>  {
        bool operator()(const mtsDescriptionInterfaceFullName & a,
                        const mtsDescriptionInterfaceFullName & b) const
        {
            return ((a.ProcessName < b.ProcessName)
                    || (a.ComponentName < b.ComponentName)
                    || (a.InterfaceName < b.InterfaceName));
        }
    };
}
}


class {
    name mtsDescriptionConnection;
    attribute CISST_EXPORT;
    mts-proxy declaration-only;
    ctor-all-members true;
    member {
        name Client;
        type mtsDescriptionInterfaceFullName;
        visibility public;
    }
    member {
        name Server;
        type mtsDescriptionInterfaceFullName;
        visibility public;
    }
    member {
        name ConnectionID;
        type ConnectionIDType;
        visibility public;
        default InvalidConnectionID;
    }
    inline-header {
    mtsDescriptionConnection(
        const std::string & clientProcessName,
        const std::string & clientComponentName, const std::string & clientInterfaceRequiredName,
        const std::string & serverProcessName,
        const std::string & serverComponentName, const std::string & serverInterfaceProvidedName,
        const ConnectionIDType connectionId = InvalidConnectionID);
    void Init(void);
    }
}

inline-header {
typedef std::vector<mtsDescriptionConnection> mtsDescriptionConnectionVec;
typedef mtsGenericObjectProxy<mtsDescriptionConnectionVec> mtsDescriptionConnectionVecProxy;
CMN_DECLARE_SERVICES_INSTANTIATION(mtsDescriptionConnectionVecProxy);
}


class {
    name mtsComponentStatusControl;
    attribute CISST_EXPORT;
    mts-proxy declaration-only;
    ctor-all-members true;
    enum {
        name ComponentStatusCommand;
        enum-value {
            name COMPONENT_START;
            description START;
            value 0;
        }
        enum-value {
            name COMPONENT_STOP;
            description STOP;
        }
        enum-value {
            name COMPONENT_RESUME;
            description RESUME;
        }
    }
    member {
        name ProcessName;
        type std::string;
        visibility public;
    }
    member {
        name ComponentName;
        type std::string;
        visibility public;
    }
    member {
        name DelayInSecond;
        type double;
        visibility public;
        default 0.0;
    }
    member {
        name Command;
        type ComponentStatusCommand;
        visibility public;
    }
}


class {
    name mtsComponentStateChange;
    attribute CISST_EXPORT;
    mts-proxy declaration-only;
    ctor-all-members true;
    member {
        name ProcessName;
        type std::string;
        visibility public;
    }
    member {
        name ComponentName;
        type std::string;
        visibility public;
    }
    member {
        name NewState;
        type mtsComponentState;
        visibility public;
    }
}


class {
    name mtsDescriptionLoadLibrary;
    attribute CISST_EXPORT;
    mts-proxy declaration-only;
    ctor-all-members true;
    member {
        name ProcessName;
        type std::string;
        visibility public;
    }
    member {
        name LibraryName;
        type std::string;
        visibility public;
    }
}


class {
    name mtsEndUserInterfaceArg;
    attribute CISST_EXPORT;
    mts-proxy declaration-only;
    ctor-all-members true;
    member {
        name OriginalInterface;
        type size_t;
        visibility public;
    }
    member {
        name UserName;
        type std::string;
        visibility public;
    }
    member {
        name EndUserInterface;
        type size_t;
        visibility public;
    }
}


class {
    name mtsMessage;
    attribute CISST_EXPORT;
    mts-proxy declaration-only;
    member {
        name Message;
        type std::string;
        visibility public;
    }
    member {
        name Counter;
        type size_t;
        default 0;
        visibility public;
    }
    member {
        name Timestamp;
        type double;
        visibility public;
        accessors set-get;
    }
    inline-header {
        void SetMessage(const std::string & message);
    }
}
inline-code {
    #include <cisstMultiTask/mtsManagerLocal.h>
    void mtsMessage::SetMessage(const std::string & message) {
        Timestamp = mtsComponentManager::GetInstance()->GetTimeServer().GetAbsoluteTimeInSeconds();
        Counter++;
        Message = message;
    }
}


class {
    name mtsComponentConstructorArg;
    base-class {
        type mtsGenericObject;
    }
    attribute CISST_EXPORT;
    ctor-all-members true;
    member {
        name Name;
        type std::string;
        visibility public;
    }
    inline-header {
        CMN_DECLARE_SERVICES(CMN_DYNAMIC_CREATION, CMN_LOG_ALLOW_DEFAULT);
    }
}
inline-header {
    CMN_DECLARE_SERVICES_INSTANTIATION(mtsComponentConstructorArg);
}


class {
    name mtsTaskConstructorArg;
    base-class {
        type mtsGenericObject;
    }
    attribute CISST_EXPORT;
    ctor-all-members true;
    member {
        name Name;
        type std::string;
        visibility public;
    }
    member {
        name StateTableSize;
        type unsigned int;
        default 256;
        visibility public;
    }
    inline-header {
        CMN_DECLARE_SERVICES(CMN_DYNAMIC_CREATION, CMN_LOG_ALLOW_DEFAULT);
    }
}
inline-header {
    CMN_DECLARE_SERVICES_INSTANTIATION(mtsTaskConstructorArg);
}


class {
    name mtsTaskContinuousConstructorArg;
    base-class {
        type mtsGenericObject;
    }
    attribute CISST_EXPORT;
    ctor-all-members true;
    member {
        name Name;
        type std::string;
        visibility public;
    }
    member {
        name StateTableSize;
        type unsigned int;
        default 256;
        visibility public;
    }
    member {
        name NewThread;
        type bool;
        default true;
        visibility public;
    }
    inline-header {
        CMN_DECLARE_SERVICES(CMN_DYNAMIC_CREATION, CMN_LOG_ALLOW_DEFAULT);
    }
}
inline-header {
    CMN_DECLARE_SERVICES_INSTANTIATION(mtsTaskContinuousConstructorArg);
}


class {
    name mtsTaskPeriodicConstructorArg;
    base-class {
        type mtsGenericObject;
    }
    attribute CISST_EXPORT;
    ctor-all-members true;
    member {
        name Name;
        type std::string;
        visibility public;
    }
    member {
        name Period;
        type double;
        visibility public;
    }
    member {
        name IsHardRealTime;
        type bool;
        default false;
        visibility public;
    }
    member {
        name StateTableSize;
        type unsigned int;
        default 256;
        visibility public;
    }
    inline-header {
        CMN_DECLARE_SERVICES(CMN_DYNAMIC_CREATION, CMN_LOG_ALLOW_DEFAULT);
    }
}
inline-header {
    CMN_DECLARE_SERVICES_INSTANTIATION(mtsTaskPeriodicConstructorArg);
}
